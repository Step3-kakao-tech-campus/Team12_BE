plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.3'
	id 'io.spring.dependency-management' version '1.1.3'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'pickup_shuttle'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
	// snippetsDir : 테스트 실행시 생성되는 응답을 저장할 디렉토리 지정
}

configurations {
	asciidoctorExtensions
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	runtimeOnly 'com.h2database:h2'
	implementation 'org.apache.httpcomponents.client5:httpclient5:5.1'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	// JWT Token
	implementation 'io.jsonwebtoken:jjwt:0.9.1'

	// junit
	implementation 'junit:junit:4.12'

	// JWT Test 사용시 필요한 라이브러리
	implementation 'javax.xml.bind:jaxb-api:2.3.0'

	// Valid 라이브러리
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// json 변환 라이브러리
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.3'

	// oauth2 라이브러리
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// JWT 라이브러리
	implementation 'com.auth0:java-jwt:4.2.1'

	// thymeleaf
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	//AWS
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

}

// === ⭐ QueryDsl 빌드 옵션 (선택) ===
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
	main.java.srcDirs += [ querydslDir ]
}
// === ⭐ Spring Rest Docs ===
tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(querydslDir)
}

clean.doLast {
	file(querydslDir).deleteDir()
}
tasks.named('test') {
	outputs.dir snippetsDir
	systemProperty 'file.encoding', 'UTF-8'
	useJUnitPlatform()
}

// (7) asciidoctor를 사용하기 위해서 asciidoctor task에 asciidoctorExtensions 설정
tasks.named('asciidoctor') {
	configurations "asciidoctorExtensions"
	inputs.dir snippetsDir
	dependsOn test
}

// (8) asciidoctor task 실행시 생성된 html 파일을 src/main/resources/static/docs 디렉토리에 카피
task copyDocument(type: Copy) {
	dependsOn asciidoctor            // (8-1)
	from file("${asciidoctor.outputDir}")   // (8-2)
	into file("src/main/resources/static/docs")   // (8-3)
}

build {
	dependsOn copyDocument  // (9) 빌드되기전 copyDocument task 실행
}

// (10)
bootJar {
	dependsOn copyDocument    // (10-1) bootJar 실행되기전 copyDocument task 실행
	from("${asciidoctor.outputDir}") {  // (10-2) bootJar에 asciidoctor task에서 생성된 html 파일 추가
		into 'static/docs'     // (10-3) bootJar에 추가될 경로
	}

}